"0","sourceCpp(""helpers/fastcover/fastcover_older_version.cpp"")"
"0","sourceCpp(""helpers/fastcover/laplacian.cpp"")"
"0","sourceCpp(""helpers/fastcover/wilson.cpp"")"
"0",""
"0","reps = 10"
"0","init = 0"
"0",""
"0","num_vert = 250"
"0","density = c(0.01, 0.05, 0.1, 0.5)"
"0","spectral_gaps = rep(0, length(density))"
"0","runtime_aldous = matrix(rep(0, length(density)*reps), length(density), reps)"
"0","runtime_fast = matrix(rep(0, length(density)*reps), length(density), reps)"
"0","runtime_wilson = matrix(rep(0, length(density)*reps), length(density), reps)"
"0","runtime_laplacian = matrix(rep(0, length(density)*reps), length(density), reps)"
"0",""
"0","set.seed(100)"
"0",""
"0","for (j in 1:length(density)) {"
"0","  ## Generate graph with bottle neck "
"0","  dens = density[j]"
"0","  "
"0","  A_1<- matrix(rep(num_vert*num_vert), num_vert, num_vert)"
"0","  A_2<- matrix(rep(num_vert*num_vert), num_vert, num_vert)"
"0","  "
"0","  U_1 = matrix(runif(num_vert*num_vert, 0, 1), num_vert, num_vert)"
"0","  U_1 = (U_1 + t(U_1))/2"
"0","  U_2 = matrix(runif(num_vert*num_vert, 0, 1), num_vert, num_vert)"
"0","  U_2 = (U_2 + t(U_2))/2"
"0","  "
"0","  A <- matrix(0, 2*num_vert, 2*num_vert)"
"0","  A[1:num_vert, 1:num_vert] <- U_1*A_1"
"0","  A[(num_vert + 1):(2*num_vert),(num_vert + 1):(2*num_vert)] <- U_2*A_2"
"0","  diag(A) <- 0"
"0","  "
"0","  # off_diags = matrix(pracma::randperm(c(rep(1, num_vert^2 * dens), rep(0, num_vert^2 * (1-dens)))), num_vert, num_vert)"
"0","  off_diags = matrix(rbinom(num_vert^2, 1, dens), num_vert, num_vert)"
"0","  U_between = matrix(runif(num_vert*num_vert, 0, 1), num_vert, num_vert)"
"0","  off_diags = off_diags * U_between"
"0","  "
"0","  A[1:num_vert, (num_vert + 1):(2*num_vert)] <- off_diags"
"0","  A[(num_vert + 1):(2*num_vert), 1:num_vert] <- t(off_diags)"
"0","  "
"0","  print(""aldous broder time: "")"
"0","  for (i in 1:reps) {"
"0","    tic()"
"0","    a1 <- randomWalkCover(A, init)"
"0","    x = toc()"
"0","    runtime_aldous[j, i] = x$toc - x$tic"
"0",""
"0","  }"
"0",""
"0","  print(""fastcover time: "")"
"0","  for (i in 1:reps) {"
"0","    tic()"
"0","    a1 <- fastCoverThreshold(A, init, num_vert*10, verbose = FALSE)"
"0","    x = toc()"
"0","    runtime_fast[j, i] = x$toc - x$tic"
"0",""
"0","  }"
"0","  "
"0","  print(""Wilson time: "")"
"0","  for (i in 1:reps) {"
"0","    tic()"
"0","    # a1 <- fastCoverThreshold(A, init, num_vert*10, verbose = FALSE)"
"0","    a1 <- wilson(A, 1)"
"0","    x = toc()"
"0","    runtime_wilson[j, i] = x$toc - x$tic"
"0",""
"0","  }"
"0","  "
"0","  #  print(""Laplacian time: "")"
"0","  # for (i in 1:reps) {"
"0","  #   tic()"
"0","  #   a1 <- chain(A)"
"0","  #   x = toc()"
"0","  #   runtime_laplacian[j, i] = x$toc - x$tic"
"0","  # "
"0","  # }"
"0","  D = diag(rowSums(A))"
"0","  Dhalfinv = diag(1/sqrt(rowSums(A)))"
"0","  nL = Dhalfinv%*%(D-A)%*%Dhalfinv"
"0","  print(""spectral gap is"")"
"0","  gap = eigen(nL)$values[2*num_vert-1]"
"0","  print(1/sqrt(gap))"
"0","  spectral_gaps[j] = 1/sqrt(gap)"
"0","}"
"1","[1]"
"1"," ""aldous broder time: """
"1","
"
"1","6.768 sec elapsed
"
"1","8.943 sec elapsed
"
"1","7.242 sec elapsed
"
"1","151.405 sec elapsed
"
"1","8.168 sec elapsed
"
"1","29.998 sec elapsed
"
"1","63.195 sec elapsed
"
"1","25.913 sec elapsed
"
"1","53.156 sec elapsed
"
"1","3.11 sec elapsed
"
"1","[1]"
"1"," ""fastcover time: """
"1","
"
"1","0.046 sec elapsed
"
"1","0.04 sec elapsed
"
"1","0.032 sec elapsed
"
"1","0.097 sec elapsed
"
"1","0.183 sec elapsed
"
"1","0.043 sec elapsed
"
"1","0.038 sec elapsed
"
"1","0.033 sec elapsed
"
"1","0.04 sec elapsed
"
"1","0.034 sec elapsed
"
"1","[1]"
"1"," ""Wilson time: """
"1","
"
"1","5.941 sec elapsed
"
"1","7.388 sec elapsed
"
"1","11.218 sec elapsed
"
"1","3.817 sec elapsed
"
"1","29.738 sec elapsed
"
"1","5.104 sec elapsed
"
"1","10.867 sec elapsed
"
"1","20.343 sec elapsed
"
"1","79.333 sec elapsed
"
"1","1.065 sec elapsed
"
"1","[1]"
"1"," ""spectral gap is"""
"1","
"
"1","[1]"
"1"," 1779.333"
"1","
"
"1","[1]"
"1"," ""aldous broder time: """
"1","
"
"1","3.193 sec elapsed
"
"1","0.088 sec elapsed
"
"1","0.538 sec elapsed
"
"1","1.94 sec elapsed
"
"1","1.861 sec elapsed
"
"1","8.37 sec elapsed
"
"1","1.228 sec elapsed
"
"1","6.513 sec elapsed
"
"1","0.857 sec elapsed
"
"1","4.5 sec elapsed
"
"1","[1]"
"1"," ""fastcover time: """
"1","
"
"1","0.038 sec elapsed
"
"1","0.035 sec elapsed
"
"1","0.038 sec elapsed
"
"1","0.067 sec elapsed
"
"1","0.033 sec elapsed
"
"1","0.043 sec elapsed
"
"1","0.039 sec elapsed
"
"1","0.034 sec elapsed
"
"1","0.04 sec elapsed
"
"1","0.038 sec elapsed
"
"1","[1]"
"1"," ""Wilson time: """
"1","
"
"1","5.66 sec elapsed
"
"1","1.286 sec elapsed
"
"1","2.701 sec elapsed
"
"1","4.419 sec elapsed
"
"1","0.855 sec elapsed
"
"1","0.227 sec elapsed
"
"1","15.251 sec elapsed
"
"1","4.199 sec elapsed
"
"1","1.259 sec elapsed
"
"1","17.439 sec elapsed
"
"1","[1]"
"1"," ""spectral gap is"""
"1","
"
"1","[1]"
"1"," 778.9003"
"1","
"
"1","[1]"
"1"," ""aldous broder time: """
"1","
"
"1","3.357 sec elapsed
"
"1","4.732 sec elapsed
"
"1","2.201 sec elapsed
"
"1","1.247 sec elapsed
"
"1","7.744 sec elapsed
"
"1","6.236 sec elapsed
"
"1","0.137 sec elapsed
"
"1","0.225 sec elapsed
"
"1","0.878 sec elapsed
"
"1","1.558 sec elapsed
"
"1","[1]"
"1"," ""fastcover time: """
"1","
"
"1","0.033 sec elapsed
"
"1","0.041 sec elapsed
"
"1","0.032 sec elapsed
"
"1","0.038 sec elapsed
"
"1","0.038 sec elapsed
"
"1","0.035 sec elapsed
"
"1","0.039 sec elapsed
"
"1","0.037 sec elapsed
"
"1","0.035 sec elapsed
"
"1","0.041 sec elapsed
"
"1","[1]"
"1"," ""Wilson time: """
"1","
"
"1","0.622 sec elapsed
"
"1","1.503 sec elapsed
"
"1","1.775 sec elapsed
"
"1","7.921 sec elapsed
"
"1","3.658 sec elapsed
"
"1","5.488 sec elapsed
"
"1","1.551 sec elapsed
"
"1","0.111 sec elapsed
"
"1","5.473 sec elapsed
"
"1","11.531 sec elapsed
"
"1","[1]"
"1"," ""spectral gap is"""
"1","
"
"1","[1]"
"1"," 561.7344"
"1","
"
"1","[1]"
"1"," ""aldous broder time: """
"1","
"
"1","0.018 sec elapsed
"
"1","0.563 sec elapsed
"
"1","1.274 sec elapsed
"
"1","0.172 sec elapsed
"
"1","1.083 sec elapsed
"
"1","0.23 sec elapsed
"
"1","0.82 sec elapsed
"
"1","0.142 sec elapsed
"
"1","0.796 sec elapsed
"
"1","0.207 sec elapsed
"
"1","[1]"
"1"," ""fastcover time: """
"1","
"
"1","0.033 sec elapsed
"
"1","0.042 sec elapsed
"
"1","0.037 sec elapsed
"
"1","0.038 sec elapsed
"
"1","0.04 sec elapsed
"
"1","0.035 sec elapsed
"
"1","0.039 sec elapsed
"
"1","0.189 sec elapsed
"
"1","0.037 sec elapsed
"
"1","0.042 sec elapsed
"
"1","[1]"
"1"," ""Wilson time: """
"1","
"
"1","0.922 sec elapsed
"
"1","0.223 sec elapsed
"
"1","1.509 sec elapsed
"
"1","0.126 sec elapsed
"
"1","0.028 sec elapsed
"
"1","0.405 sec elapsed
"
"1","0.319 sec elapsed
"
"1","1.448 sec elapsed
"
"1","0.08 sec elapsed
"
"1","0.461 sec elapsed
"
"1","[1]"
"1"," ""spectral gap is"""
"1","
"
"1","[1]"
"1"," 250.812"
"1","
"
