"0","set.seed(100)"
"0","sourceCpp('helpers/fastcover/fastcover.cpp')"
"0","reps = 10"
"0","init = 0"
"0",""
"0","vertices = c(1, 1.2, 1.6, 2) * 250"
"0","runtime_aldous_s = matrix(rep(0, length(vertices)*reps), length(vertices), reps)"
"0","runtime_fast_s = matrix(rep(0, length(vertices)*reps), length(vertices), reps)"
"0","runtime_wilson_s = matrix(rep(0, length(vertices)*reps), length(vertices), reps)"
"0",""
"0","dens = 0.1"
"0","# cross_factor = 0.01"
"0","for (j in 1:length(vertices)) {"
"0","  ## Generate graph with bottle neck "
"0","  num_vert = vertices[j]"
"0","  "
"0","  A_1<- matrix(rep(num_vert*num_vert), num_vert, num_vert)"
"0","  A_2<- matrix(rep(num_vert*num_vert), num_vert, num_vert)"
"0","  "
"0","  U_1 = matrix(runif(num_vert*num_vert, 0, 1), num_vert, num_vert)"
"0","  U_1 = (U_1 + t(U_1))/2"
"0","  U_2 = matrix(runif(num_vert*num_vert, 0, 1), num_vert, num_vert)"
"0","  U_2 = (U_2 + t(U_2))/2"
"0","  "
"0","  A <- matrix(0, 2*num_vert, 2*num_vert)"
"0","  A[1:num_vert, 1:num_vert] <- U_1*A_1"
"0","  A[(num_vert + 1):(2*num_vert),(num_vert + 1):(2*num_vert)] <- U_2*A_2"
"0","  diag(A) <- 0"
"0","  "
"0","  # off_diags = matrix(pracma::randperm(c(rep(1, num_vert^2 * dens), rep(0, num_vert^2 * (1-dens)))), num_vert, num_vert)"
"0","  off_diags = matrix(rbinom(num_vert^2, 1, dens), num_vert, num_vert)"
"0","  U_between = matrix(runif(num_vert*num_vert, 0, 1), num_vert, num_vert)"
"0","  off_diags = off_diags * U_between"
"0","  "
"0","  A[1:num_vert, (num_vert + 1):(2*num_vert)] <- off_diags"
"0","  A[(num_vert + 1):(2*num_vert), 1:num_vert] <- t(off_diags)"
"0","  "
"0","  print(""aldous broder time: "")"
"0","  for (i in 1:reps) {"
"0","    tic()"
"0","    a1 <- randomWalkCover(A, init)"
"0","    x = toc()"
"0","    runtime_aldous_s[j, i] = x$toc - x$tic"
"0","    "
"0","  }"
"0",""
"0","  print(""fastcover time: "")"
"0","  for (i in 1:reps) {"
"0","    tic()"
"0","    # a1 <- fastCoverThreshold(A, init, num_vert, verbose = FALSE)"
"0","    a1 <- fastCoverThreshold(A, init, 1000, verbose = FALSE)"
"0","    x = toc()"
"0","    runtime_fast_s[j, i] = x$toc - x$tic"
"0",""
"0","  }"
"0","  "
"0","  print(""wilson time: "")"
"0","  for (i in 1:reps) {"
"0","    tic()"
"0","    # a1 <- fastCoverThreshold(A, init, num_vert, verbose = FALSE)"
"0","    a1 <- wilson(A, init)"
"0","    x = toc()"
"0","    runtime_wilson_s[j, i] = x$toc - x$tic"
"0",""
"0","  }"
"0","}"
"1","[1]"
"1"," ""aldous broder time: """
"1","
"
"1","3.307 sec elapsed
"
"1","4.25 sec elapsed
"
"1","0.077 sec elapsed
"
"1","0.026 sec elapsed
"
"1","0.795 sec elapsed
"
"1","1.607 sec elapsed
"
"1","2.011 sec elapsed
"
"1","1.604 sec elapsed
"
"1","1.782 sec elapsed
"
"1","2.592 sec elapsed
"
"1","[1]"
"1"," ""fastcover time: """
"1","
"
"1","0.041 sec elapsed
"
"1","0.017 sec elapsed
"
"1","0.04 sec elapsed
"
"1","0.027 sec elapsed
"
"1","0.021 sec elapsed
"
"1","0.032 sec elapsed
"
"1","0.036 sec elapsed
"
"1","0.026 sec elapsed
"
"1","0.035 sec elapsed
"
"1","0.038 sec elapsed
"
"1","[1]"
"1"," ""wilson time: """
"1","
"
"1","7.918 sec elapsed
"
"1","1.244 sec elapsed
"
"1","2.507 sec elapsed
"
"1","0.355 sec elapsed
"
"1","3.601 sec elapsed
"
"1","0.614 sec elapsed
"
"1","3.436 sec elapsed
"
"1","6.865 sec elapsed
"
"1","0.153 sec elapsed
"
"1","4.134 sec elapsed
"
"1","[1]"
"1"," ""aldous broder time: """
"1","
"
"1","1.742 sec elapsed
"
"1","0.963 sec elapsed
"
"1","14.382 sec elapsed
"
"1","5.647 sec elapsed
"
"1","3.926 sec elapsed
"
"1","14.666 sec elapsed
"
"1","2.586 sec elapsed
"
"1","1.022 sec elapsed
"
"1","7.545 sec elapsed
"
"1","10.16 sec elapsed
"
"1","[1]"
"1"," ""fastcover time: """
"1","
"
"1","0.048 sec elapsed
"
"1","0.058 sec elapsed
"
"1","0.053 sec elapsed
"
"1","0.053 sec elapsed
"
"1","0.059 sec elapsed
"
"1","0.085 sec elapsed
"
"1","0.061 sec elapsed
"
"1","0.057 sec elapsed
"
"1","0.078 sec elapsed
"
"1","0.055 sec elapsed
"
"1","[1]"
"1"," ""wilson time: """
"1","
"
"1","1.171 sec elapsed
"
"1","2.939 sec elapsed
"
"1","9.867 sec elapsed
"
"1","3.742 sec elapsed
"
"1","0.094 sec elapsed
"
"1","0.641 sec elapsed
"
"1","2.838 sec elapsed
"
"1","11.573 sec elapsed
"
"1","5.321 sec elapsed
"
"1","2.591 sec elapsed
"
"1","[1]"
"1"," ""aldous broder time: """
"1","
"
"1","20.973 sec elapsed
"
"1","29.608 sec elapsed
"
"1","12.783 sec elapsed
"
"1","11.698 sec elapsed
"
"1","1.499 sec elapsed
"
"1","3.275 sec elapsed
"
"1","2.197 sec elapsed
"
"1","8.705 sec elapsed
"
"1","4.513 sec elapsed
"
"1","2.427 sec elapsed
"
"1","[1]"
"1"," ""fastcover time: """
"1","
"
"1","0.148 sec elapsed
"
"1","0.166 sec elapsed
"
"1","0.113 sec elapsed
"
"1","0.11 sec elapsed
"
"1","0.123 sec elapsed
"
"1","0.153 sec elapsed
"
"1","0.165 sec elapsed
"
"1","0.114 sec elapsed
"
"1","0.229 sec elapsed
"
"1","0.166 sec elapsed
"
"1","[1]"
"1"," ""wilson time: """
"1","
"
"1","17.265 sec elapsed
"
"1","2.727 sec elapsed
"
"1","1.99 sec elapsed
"
"1","14.632 sec elapsed
"
"1","14.72 sec elapsed
"
"1","5.679 sec elapsed
"
"1","66.505 sec elapsed
"
"1","2.81 sec elapsed
"
"1","3.509 sec elapsed
"
"1","7.179 sec elapsed
"
"1","[1]"
"1"," ""aldous broder time: """
"1","
"
"1","9.441 sec elapsed
"
"1","6.061 sec elapsed
"
"1","27.639 sec elapsed
"
"1","17.707 sec elapsed
"
"1","58.514 sec elapsed
"
"1","22.893 sec elapsed
"
"1","16.456 sec elapsed
"
"1","18.679 sec elapsed
"
"1","1.508 sec elapsed
"
"1","26.321 sec elapsed
"
"1","[1]"
"1"," ""fastcover time: """
"1","
"
"1","0.267 sec elapsed
"
"1","0.294 sec elapsed
"
"1","0.432 sec elapsed
"
"1","0.29 sec elapsed
"
"1","0.288 sec elapsed
"
"1","0.29 sec elapsed
"
"1","0.295 sec elapsed
"
"1","0.339 sec elapsed
"
"1","0.286 sec elapsed
"
"1","0.309 sec elapsed
"
"1","[1]"
"1"," ""wilson time: """
"1","
"
"1","34.439 sec elapsed
"
"1","8.277 sec elapsed
"
"1","5.305 sec elapsed
"
"1","1.566 sec elapsed
"
"1","29.091 sec elapsed
"
"1","21.447 sec elapsed
"
"1","25.623 sec elapsed
"
"1","42.248 sec elapsed
"
"1","12.955 sec elapsed
"
"1","18.357 sec elapsed
"
