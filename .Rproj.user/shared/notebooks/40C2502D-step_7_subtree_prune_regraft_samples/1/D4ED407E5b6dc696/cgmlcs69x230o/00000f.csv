"0","## Gibbs Sampler Full Conditionals"
"0","library(gtools)"
"0","library(mvtnorm)"
"0","library(invgamma)"
"0","library(LaplacesDemon)"
"0","library(igraph)"
"0",""
"0","source(""helpers/helper.R"")"
"0",""
"0","evaluate_density = function(mu, Sigma, y, pi, z, delta, edge_list, K, nu, Sigma_0, conc = 0.1){"
"0","  n = dim(y)[1]"
"0","  p = dim(y)[2]"
"0","  K_tilde = K + 1"
"0","  "
"0","  logL = 0"
"0","  eps = 1e-30"
"0",""
"0","  for (i in 1:n){"
"0","    logL = logL + log(dmvnorm(y[i,], mu[z[i], ], Sigma))"
"0","    logL = logL + log(pi[z[i]] + eps) "
"0","  }"
"0",""
"0","  logL = logL + log(dinvwishart(Sigma, nu, Sigma_0))"
"0","  logL = logL +  ddirichlet(pi[2:K_tilde], rep(conc, K), log = TRUE)"
"0",""
"0","  ## edgelist is E x 2 matrix, with left being source and right being sink node"
"0","  num_edge = dim(edge_list)[1]"
"0","  for (q in 1:num_edge){"
"0","    logL = logL + log(dmvnorm(mu[edge_list[q,2],], mu[edge_list[q,1],], diag(p)/delta))"
"0","  }"
"0","  "
"0","  logL"
"0","}"
"0",""
"0","## T sampler (rjmcmc version)"
"0","sample_T_spr = function(g, mu, Sigma, y, pi, z, delta, K, nu, Sigma_0, conc = 0.1){"
"0","  print(""ok"")"
"0","  current_tree <- g"
"0","  print(""nodes are"")"
"0",""
"0","  # Randomly select a node to prune (excluding root)"
"0","  nodes <- V(current_tree)$name[-1] # Exclude root"
"0","  prune_node <- sample(nodes, 1)"
"0","  print(nodes)"
"0","  # Get subtree rooted at prune_node"
"0","  subtree <- induced_subgraph(current_tree, "
"0","                      as.character(subcomponent(current_tree, as.character(prune_node), mode=""out"")))"
"0","  "
"0","  # Remove subtree from current tree"
"0","  pruned_tree <- delete_vertices(current_tree, as.character(V(subtree)$name))"
"0","  "
"0","  # Select random attachment point in pruned tree"
"0","  attach_points <- V(pruned_tree)$name"
"0","  new_parent <- sample(attach_points, 1)"
"0",""
"0","  # Create proposed tree by attaching subtree to new parent"
"0","  proposed_tree <- pruned_tree"
"0","  proposed_tree <- add_vertices(proposed_tree, vcount(subtree))"
"0","  V(proposed_tree)$name[(vcount(pruned_tree)+1):vcount(proposed_tree)] <-   V(subtree)$name"
"0","  proposed_tree <- add_edges(proposed_tree, "
"0","                           c(as.character(new_parent), as.character(prune_node)))"
"0","  "
"0","  subtree_edges <- E(subtree)"
"0","  for (e in subtree_edges) {"
"0","    edge_ends <- ends(subtree, as.character(e))"
"0","    proposed_tree <- add_edges(proposed_tree, as.character(edge_ends))"
"0","    "
"0","  }"
"0","  print(""calculate ratio"")"
"0","  # Calculate posterior and acceptance ratio"
"0","  proposed_posterior <- evaluate_density(mu, Sigma, y, pi, z, delta, as_edgelist(proposed_tree), K, nu, Sigma_0, conc) # omit prior since constant and uniform"
"0",""
"0","  current_posterior <- evaluate_density(mu, Sigma, y, pi, z, delta, as_edgelist(current_tree), K, nu, Sigma_0, conc) # omit prior since constant and uniform"
"0","  print(""acceptance pre"")"
"0","  # proposal_ratio can be omitted since they are the same"
"0","  acceptance_ratio <- exp(proposed_posterior- current_posterior) "
"0","  print(""acceptance"")"
"0","  print(acceptance_ratio)"
"0","  # Accept/reject"
"0","  if (runif(1) < acceptance_ratio) {"
"0","    g <- proposed_tree"
"0","  } else {"
"0","    g <- current_tree"
"0","  }"
"0","  return(g)"
"0","}"
"0",""
"0",""
"0","## z sampler "
"0","sample_z_rjmcmc = function(y,pi,mu, Sigma, V_T){"
"0","  n = dim(y)[1]"
"0","  p = dim(y)[2]"
"0","  "
"0","  V_T_size = length(V_T)"
"0","  p.z.given.y = matrix(rep(0, n*V_T_size), ncol = V_T_size)"
"0","  for (i in 1:n){"
"0","    for (k in 1:V_T_size){"
"0","      node = V_T[k]"
"0","      p.z.given.y[i, k] = pi[node]*dmvnorm(y[i,], mu[node,], Sigma)"
"0","    }"
"0","    denominator = sum(p.z.given.y[i,])"
"0","    p.z.given.y[i, ] = p.z.given.y[i, ]/denominator"
"0","  }"
"0","  z = rep(0, n)"
"0","  if (V_T_size == 1){"
"0","    z = rep(V_T[1], n)"
"0","    return(z)"
"0","  }"
"0","  for(i in 1:n){"
"0","    z[i] = sample(V_T, size=1,prob=p.z.given.y[i,],replace=TRUE)"
"0","  }"
"0","  return(z)"
"0","}"
"0",""
"0","## pi sampler"
"0","sample_pi = function(z,K, conc = 0.1){"
"0","  K_tilde = K + 1"
"0","  counts = colSums(outer(z,2:K_tilde,FUN=""==""))"
"0","  pi = rdirichlet(1,counts + conc)  "
"0","  return(c(0, pi))"
"0","}"
"0",""
"0","# mu sampler"
"0","sample_mu_rjmcmc = function(y, z, K, p, curr_mu, Sigma, V_T, g, delta){"
"0","  mu = curr_mu"
"0","  "
"0","  for(k in V_T){"
"0","    sample.size = sum(z==k)"
"0","    delta_k = delta + sample.size"
"0","    sample.sum = rep(0, p)"
"0","    "
"0","    if (sample.size > 1) {"
"0","      sample.sum = as.matrix(colSums(y[z==k,], ))"
"0","    }"
"0","    "
"0","    if (sample.size == 1) {"
"0","      sample.sum =  as.matrix(y[z==k,])"
"0","    }"
"0","    if (sample.size == 0) {"
"0","      print(""waah 0 ah"")"
"0","      sample.sum = 0"
"0","    }"
"0","    print(""here prior"")"
"0","    print(k)"
"0","    print(V_T)"
"0","    print(g)"
"0","    neighboring = neighbors(g, as.character(k), mode = ""all"")$name"
"0","    print(""after neighbor"")"
"0","    neighbor_values = mu[as.numeric(neighboring), ]"
"0","    if (is.vector(neighbor_values)){"
"0","      neighbors.sum = as.matrix(neighbor_values)"
"0","    }else{"
"0","      neighbors.sum = as.matrix(colSums(neighbor_values))"
"0","    }"
"0","    num_neighbors = length(neighboring)"
"0","    neighbors.avg = rep(0, dim(mu)[2])"
"0","    if (num_neighbors ==0){"
"0","      print(""bingo"")"
"0","      print(g)"
"0","    } else {"
"0","      neighbors.avg = neighbors.sum/num_neighbors"
"0","    }"
"0","    "
"0","    post.mean = (delta*neighbors.avg + sample.sum)/(delta_k)"
"0","    mu[k,] = rmvnorm(1, post.mean, Sigma/delta_k)"
"0","  }"
"0","  return(mu)"
"0","}"
"0",""
"0","# Sigma sampler"
"0","sample_Sigma_rjmcmc = function(y,K, nu, Sigma_0, delta, z, mu, V_T){"
"0","  n = dim(y)[1]"
"0","  p = dim(y)[2]"
"0","  Sigma_new = Sigma_0"
"0","  nu_new = nu"
"0","  for(k in V_T){"
"0","    sample.size = sum(z==k)"
"0","    nu_new = nu_new + sample.size"
"0","    "
"0","    if (sample.size > 1) {"
"0","      mu_hat = colMeans(y[z==k,])"
"0","      sample_diff = sweep(y[z==k,], 2, mu_hat)"
"0","      mu_diff = mu[k, ] - mu_hat"
"0","      S = t(sample_diff)%*%sample_diff"
"0","      var_term = mu_diff %*% t(mu_diff)"
"0","      Sigma_new = Sigma_new + S + var_term*(delta*sample.size/(sample.size + delta))"
"0","    }"
"0","    "
"0","    if (sample.size == 1) {"
"0","      X = y[z==k,] - mu[k, ]"
"0","      vec = as.vector(X)"
"0","      sample.var = vec %*% t(vec)"
"0","      Sigma_new = Sigma_new + sample.var*(delta*sample.size/(sample.size + delta))"
"0","    }"
"0","  }"
"0","  Sigma = rinvwishart(nu_new, Sigma_new)"
"0","  "
"0","  return(Sigma)"
"0","}"
"0",""
"0","## Main rjmcmc function"
"0","spr = function(y,K,niter =1000, nu, Sigma_0, delta, p0, verbose = FALSE, tuning = 0.1){"
"0",""
"0","  print(""In SPR function"")"
"0","  ## initialize variables"
"0","  n = dim(y)[1]"
"0","  p = dim(y)[2]"
"0","  "
"0","  ## set up starting points"
"0","  pi = sample_pi(rep(0, n), K)"
"0","  mu = matrix(rep(0, K * p), K, p)  "
"0","  mu_root = rep(0, p)"
"0","  mu = rbind(mu_root, mu)"
"0","  Sigma = diag(p)"
"0","  "
"0","  K_tilde = K + 1"
"0",""
"0",""
"0","g <- make_empty_graph(K_tilde, directed = TRUE)"
"0","vertex_attr(g) <- list(name = 1:K_tilde)"
"0","for (i in 1:(K_tilde -1)){"
"0","  g <- add_edges(g, c(as.character(i), as.character(i + 1)))"
"0","}"
"0",""
"0","  V_T = getTreeNodes(g, K_tilde)$name"
"0"," "
"0","  z = sample_z_rjmcmc(y,pi,mu,Sigma, V_T)"
"0","  "
"0","  ## set up array to store samples"
"0","  res = list(mu=array(0, dim = c(niter, K + 1, p)), "
"0","             pi = matrix(nrow=niter,ncol=K + 1), "
"0","             z = matrix(nrow=niter, ncol=n), "
"0","             Sigma = array(0, dim = c(niter, p, p)))"
"0","  "
"0","  write_graph(g, paste(""saved_trajectories/rjmcmc_trees/tree"", 1, "".graphml"", sep = """"), format = ""graphml"")"
"0","  "
"0","  ## initialize chain"
"0","  res$mu[1,,]=mu"
"0","  res$pi[1,]=pi"
"0","  res$z[1,]=z "
"0","  res$Sigma[1,,]=Sigma"
"0","  "
"0","  print(""Initialization finished"")"
"0","  ## loop through chain"
"0","  for(i in 2:niter){"
"0","    if (i %% 100 == 0){"
"0","      print(""In SPR loop iteration number: "")"
"0","      print(i)"
"0","    }"
"0","    ## sample from full conditionals"
"0","    print(""sample pi"")"
"0","    pi = sample_pi(z,K)"
"0","    print(""sample mu"")"
"0","    mu = sample_mu_rjmcmc(y, z, K, p, mu, Sigma, V_T, g, delta)"
"0","    print(""sample z"")"
"0","    print(pi)"
"0","    print(mu)"
"0","    print(Sigma)"
"0","    z = sample_z_rjmcmc(y,pi,mu, Sigma, V_T)"
"0","    Sigma = sample_Sigma_rjmcmc(y,K, nu, Sigma_0, delta, z, mu, V_T)"
"0","    g = sample_T_spr(g, mu, Sigma, y, pi, z, delta, K, nu, Sigma_0, conc = 0.1)"
"0",""
"0","    ## save results "
"0","    res$mu[i,,] = mu"
"0","    res$pi[i,] = pi"
"0","    res$z[i,] = z"
"0","    res$Sigma[i,,]=Sigma"
"0","    write_graph(g, paste(""saved_trajectories/spr_trees/tree"", i, "".graphml"", sep = """"), format = ""graphml"")"
"0","  }"
"0","  return(res)"
"0","}"
"0",""
"0",""
