"0","set.seed(100)"
"0","reps = 10"
"0","init = 0"
"0",""
"0","vertices = c(1, 1.2, 1.6, 2) * 50"
"0","runtime_laplace_s = matrix(rep(0, length(vertices)*reps), length(vertices), reps)"
"0","runtime_fast_s = matrix(rep(0, length(vertices)*reps), length(vertices), reps)"
"0",""
"0",""
"0","dens = 0.1"
"0","for (j in 1:length(vertices)) {"
"0","  ## Generate graph with bottle neck "
"0","  num_vert = vertices[j]"
"0","  "
"0","  A_1<- matrix(rep(1, num_vert*num_vert), num_vert, num_vert)"
"0","  A_2<- matrix(rep(1, num_vert*num_vert), num_vert, num_vert)"
"0",""
"0","  A <- matrix(0, 2*num_vert, 2*num_vert)"
"0","  A[1:num_vert, 1:num_vert] <- A_1"
"0","  A[(num_vert + 1):(2*num_vert),(num_vert + 1):(2*num_vert)] <- A_2"
"0","  diag(A) <- 0"
"0","  "
"0","  off_diags = matrix(rbinom(num_vert^2, 1, dens), num_vert, num_vert)"
"0","  "
"0","  A[1:num_vert, (num_vert + 1):(2*num_vert)] <- off_diags"
"0","  A[(num_vert + 1):(2*num_vert), 1:num_vert] <- t(off_diags)"
"0","  "
"0",""
"0","  print(""fastcover time: "")"
"0","  for (i in 1:reps) {"
"0","    tic()"
"0","    a1 <- fastCoverThreshold(A, init, 1000, verbose = FALSE)"
"0","    x = toc()"
"0","    runtime_fast_s[j, i] = x$toc - x$tic"
"0",""
"0","  }"
"0","  "
"0","  print(""laplace time: "")"
"0","  for (i in 1:reps) {"
"0","    tic()"
"0","    a1 <- chain(A)"
"0","    x = toc()"
"0","    runtime_laplace_s[j, i] = x$toc - x$tic"
"0",""
"0","  }"
"0"," "
"0","}"
"1","[1]"
"1"," ""fastcover time: """
"1","
"
"1","0.001 sec elapsed
"
"1","0.001 sec elapsed
"
"1","0.001 sec elapsed
"
"1","0.001 sec elapsed
"
"1","0.001 sec elapsed
"
"1","0 sec elapsed
"
"1","0.001 sec elapsed
"
"1","0 sec elapsed
"
"1","0.001 sec elapsed
"
"1","0.001 sec elapsed
"
"1","[1]"
"1"," ""laplace time: """
"1","
"
"1","0.918 sec elapsed
"
"1","0.936 sec elapsed
"
"1","0.933 sec elapsed
"
"1","0.893 sec elapsed
"
"1","0.958 sec elapsed
"
"1","0.966 sec elapsed
"
"1","0.958 sec elapsed
"
"1","0.929 sec elapsed
"
"1","0.94 sec elapsed
"
"1","0.878 sec elapsed
"
"1","[1]"
"1"," ""fastcover time: """
"1","
"
"1","0.001 sec elapsed
"
"1","0.001 sec elapsed
"
"1","0.001 sec elapsed
"
"1","0.001 sec elapsed
"
"1","0.001 sec elapsed
"
"1","0.001 sec elapsed
"
"1","0.001 sec elapsed
"
"1","0.002 sec elapsed
"
"1","0.001 sec elapsed
"
"1","0.001 sec elapsed
"
"1","[1]"
"1"," ""laplace time: """
"1","
"
"1","2.408 sec elapsed
"
"1","2.287 sec elapsed
"
"1","2.045 sec elapsed
"
"1","2.074 sec elapsed
"
"1","2.213 sec elapsed
"
"1","2.303 sec elapsed
"
"1","2.305 sec elapsed
"
"1","2.083 sec elapsed
"
"1","2.016 sec elapsed
"
"1","2.075 sec elapsed
"
"1","[1]"
"1"," ""fastcover time: """
"1","
"
"1","0.002 sec elapsed
"
"1","0.001 sec elapsed
"
"1","0.001 sec elapsed
"
"1","0.002 sec elapsed
"
"1","0.008 sec elapsed
"
"1","0.001 sec elapsed
"
"1","0.002 sec elapsed
"
"1","0.001 sec elapsed
"
"1","0.002 sec elapsed
"
"1","0.001 sec elapsed
"
"1","[1]"
"1"," ""laplace time: """
"1","
"
"1","8.812 sec elapsed
"
"1","7.702 sec elapsed
"
"1","8.461 sec elapsed
"
"1","8.275 sec elapsed
"
"1","8.828 sec elapsed
"
"1","8.199 sec elapsed
"
"1","8.624 sec elapsed
"
"1","9.072 sec elapsed
"
"1","8.099 sec elapsed
"
"1","8.535 sec elapsed
"
"1","[1]"
"1"," ""fastcover time: """
"1","
"
"1","0.002 sec elapsed
"
"1","0.014 sec elapsed
"
"1","0.002 sec elapsed
"
"1","0.002 sec elapsed
"
"1","0.002 sec elapsed
"
"1","0.016 sec elapsed
"
"1","0.002 sec elapsed
"
"1","0.002 sec elapsed
"
"1","0.002 sec elapsed
"
"1","0.012 sec elapsed
"
"1","[1]"
"1"," ""laplace time: """
"1","
"
"1","24.939 sec elapsed
"
"1","25.269 sec elapsed
"
"1","26.969 sec elapsed
"
"1","24.46 sec elapsed
"
"1","26.502 sec elapsed
"
"1","24.463 sec elapsed
"
"1","25.114 sec elapsed
"
"1","22.818 sec elapsed
"
"1","25.734 sec elapsed
"
"1","25.379 sec elapsed
"
