"0","set.seed(100)"
"0","reps = 10"
"0","init = 0"
"0",""
"0","num_vert = 200"
"0","blocks = c(2, 4, 8, 10)"
"0","cross_factors = 0.005 * c(1/2, 1/4, 1/8, 1/10)"
"0","runtime_laplace_c = matrix(rep(0, length(blocks)*reps), length(blocks), reps)"
"0","runtime_fast_c = matrix(rep(0, length(blocks)*reps), length(blocks), reps)"
"0",""
"0",""
"0","for (j in 1:length(blocks)) {"
"0","  cross_factor = cross_factors[j]"
"0","  ## Generate graph with blocks"
"0","  num_block = blocks[j]"
"0","  A <- matrix(0, num_vert, num_vert)"
"0","  "
"0","  for (qq in 1:num_block){"
"0","    block_size= num_vert/num_block"
"0","    A_s = matrix(rep(1,block_size*block_size), block_size, block_size)"
"0","    A[(qq-1)*block_size + (1:block_size), (qq-1)*block_size + (1:block_size)] <- A_s"
"0","    "
"0","    complement = setdiff(1:num_vert, (qq-1)*block_size + (1:block_size))"
"0","    "
"0","    between_block = matrix(rbinom((num_vert-block_size) * block_size, 1, cross_factor), num_vert - block_size, block_size)"
"0","    "
"0","    A[complement, (qq-1)*block_size + (1:block_size)] = between_block"
"0","    A[(qq-1)*block_size + (1:block_size), complement] = t(between_block)"
"0","  }"
"0",""
"0","  diag(A) <- 0"
"0"," "
"0","  "
"0","  print(""fastcover time: "")"
"0","  for (i in 1:reps) {"
"0","    tic()"
"0","    a1 <- fastCoverThreshold(A, init, num_vert*10, verbose = FALSE)"
"0","    x = toc()"
"0","    runtime_fast_c[j, i] = x$toc - x$tic"
"0",""
"0","  }"
"0","  "
"0","  print(""laplace time: "")"
"0","  for (i in 1:reps) {"
"0","    tic()"
"0","    a1 <- chain(A)"
"0","    x = toc()"
"0","    runtime_laplace_c[j, i] = x$toc - x$tic"
"0",""
"0","  }"
"0",""
"0"," "
"0","}"
"1","[1]"
"1"," ""fastcover time: """
"1","
"
"1","0.003 sec elapsed
"
"1","0.003 sec elapsed
"
"1","0.014 sec elapsed
"
"1","0.002 sec elapsed
"
"1","0.004 sec elapsed
"
"1","0.009 sec elapsed
"
"1","0.002 sec elapsed
"
"1","0.002 sec elapsed
"
"1","0.012 sec elapsed
"
"1","0.002 sec elapsed
"
"1","[1]"
"1"," ""laplace time: """
"1","
"
"1","17.313 sec elapsed
"
"1","17.874 sec elapsed
"
"1","17.673 sec elapsed
"
"1","16.908 sec elapsed
"
"1","17.28 sec elapsed
"
"1","17.205 sec elapsed
"
"1","17.746 sec elapsed
"
"1","17.353 sec elapsed
"
"1","18.41 sec elapsed
"
"1","17.789 sec elapsed
"
"1","[1]"
"1"," ""fastcover time: """
"1","
"
"1","0.007 sec elapsed
"
"1","0.003 sec elapsed
"
"1","0.009 sec elapsed
"
"1","0.003 sec elapsed
"
"1","0.017 sec elapsed
"
"1","0.01 sec elapsed
"
"1","0.013 sec elapsed
"
"1","0.015 sec elapsed
"
"1","0.002 sec elapsed
"
"1","0.002 sec elapsed
"
"1","[1]"
"1"," ""laplace time: """
"1","
"
"1","8.677 sec elapsed
"
"1","8.399 sec elapsed
"
"1","8.586 sec elapsed
"
"1","8.523 sec elapsed
"
"1","8.841 sec elapsed
"
"1","7.859 sec elapsed
"
"1","8.721 sec elapsed
"
"1","8.892 sec elapsed
"
"1","8.68 sec elapsed
"
"1","8.235 sec elapsed
"
"1","[1]"
"1"," ""fastcover time: """
"1","
"
"1","0.021 sec elapsed
"
"1","0.077 sec elapsed
"
"1","0.025 sec elapsed
"
"1","0.023 sec elapsed
"
"1","0.027 sec elapsed
"
"1","0.028 sec elapsed
"
"1","0.03 sec elapsed
"
"1","0.016 sec elapsed
"
"1","0.029 sec elapsed
"
"1","0.025 sec elapsed
"
"1","[1]"
"1"," ""laplace time: """
"1","
"
"1","3.866 sec elapsed
"
"1","4.163 sec elapsed
"
"1","4.199 sec elapsed
"
"1","4.185 sec elapsed
"
"1","4.17 sec elapsed
"
"1","3.96 sec elapsed
"
"1","4.325 sec elapsed
"
"1","4.024 sec elapsed
"
"1","3.779 sec elapsed
"
"1","3.942 sec elapsed
"
"1","[1]"
"1"," ""fastcover time: """
"1","
"
"1","0.032 sec elapsed
"
"1","0.024 sec elapsed
"
"1","0.029 sec elapsed
"
"1","0.025 sec elapsed
"
"1","0.036 sec elapsed
"
"1","0.026 sec elapsed
"
"1","0.021 sec elapsed
"
"1","0.032 sec elapsed
"
"1","0.034 sec elapsed
"
"1","0.025 sec elapsed
"
"1","[1]"
"1"," ""laplace time: """
"1","
"
"1","3.235 sec elapsed
"
"1","2.853 sec elapsed
"
"1","3.299 sec elapsed
"
"1","3.043 sec elapsed
"
"1","3.101 sec elapsed
"
"1","3.084 sec elapsed
"
"1","3.002 sec elapsed
"
"1","2.926 sec elapsed
"
"1","2.997 sec elapsed
"
"1","3.195 sec elapsed
"
