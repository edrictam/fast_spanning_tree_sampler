"0",""
"0","reps = 10"
"0","init = 0"
"0",""
"0","num_vert = 600"
"0","blocks = c(2, 4, 8, 10)"
"0","cross_factors = 0.005 * c(1/2, 1/4, 1/8, 1/10)"
"0","runtime_aldous_c = matrix(rep(0, length(blocks)*reps), length(blocks), reps)"
"0","runtime_fast_c = matrix(rep(0, length(blocks)*reps), length(blocks), reps)"
"0","runtime_wilson_c = matrix(rep(0, length(blocks)*reps), length(blocks), reps)"
"0",""
"0","dens = 0.001"
"0",""
"0","for (j in 1:length(blocks)) {"
"0","  cross_factor = cross_factors[j]"
"0","  ## Generate graph with blocks"
"0","  num_block = blocks[j]"
"0","  A <- matrix(0, num_vert, num_vert)"
"0","  "
"0","  for (qq in 1:num_block){"
"0","    block_size= num_vert/num_block"
"0","    U_s = matrix(runif(block_size*block_size, 0, 1), block_size, block_size)"
"0","    U_s = (U_s + t(U_s))/2"
"0","    A_s = matrix(rep(1,block_size*block_size), block_size, block_size)"
"0","    A[(qq-1)*block_size + (1:block_size), (qq-1)*block_size + (1:block_size)] <- U_s*A_s"
"0","    "
"0","    complement = setdiff(1:num_vert, (qq-1)*block_size + (1:block_size))"
"0","    "
"0","    # between_block = matrix(pracma::randperm(c(rep(1, (num_vert-block_size) * block_size * dens), rep(0, (num_vert-block_size) * block_size * (1-dens)))), num_vert - block_size, block_size)"
"0","    between_block = matrix(rbinom((num_vert-block_size) * block_size, 1, dens), num_vert - block_size, block_size)"
"0","    "
"0","    U_between = matrix(runif((num_vert-block_size) * block_size, 0, 1), num_vert - block_size, block_size)"
"0","    "
"0","    between_block = between_block * U_between * cross_factor"
"0","    A[complement, (qq-1)*block_size + (1:block_size)] = between_block"
"0","    A[(qq-1)*block_size + (1:block_size), complement] = t(between_block)"
"0","  }"
"0",""
"0","  diag(A) <- 0"
"0"," "
"0","  "
"0","  print(""aldous broder time: "")"
"0","  for (i in 1:reps) {"
"0","    tic()"
"0","    a1 <- randomWalkCover(A, init)"
"0","    x = toc()"
"0","    runtime_aldous_c[j, i] = x$toc - x$tic"
"0","    "
"0","  }"
"0",""
"0","  print(""fastcover time: "")"
"0","  for (i in 1:reps) {"
"0","    tic()"
"0","    # a1 <- fastCoverThreshold(A, init, 5*num_vert, verbose = FALSE)"
"0","    a1 <- fastCoverThreshold(A, init, 1000, verbose = FALSE)"
"0","    x = toc()"
"0","    runtime_fast_c[j, i] = x$toc - x$tic"
"0",""
"0","  }"
"0","  "
"0","  print(""wilson time: "")"
"0","  for (i in 1:reps) {"
"0","    tic()"
"0","    # a1 <- fastCoverThreshold(A, init, 5*num_vert, verbose = FALSE)"
"0","    a1 <- wilson(A, init)"
"0","    x = toc()"
"0","    runtime_wilson_c[j, i] = x$toc - x$tic"
"0",""
"0","  }"
"0","  "
"0","  D = diag(rowSums(A))"
"0","  Dhalfinv = diag(1/sqrt(rowSums(A)))"
"0","  nL = Dhalfinv%*%(D-A)%*%Dhalfinv"
"0","  print(""spectral gap is"")"
"0","  gap = eigen(nL)$values[num_vert-1]"
"0","  print(gap)"
"0","}"
"1","[1]"
"1"," ""aldous broder time: """
"1","
"
"1","0.49 sec elapsed
"
"1","2.063 sec elapsed
"
"1","0.063 sec elapsed
"
"1","1.581 sec elapsed
"
"1","0.76 sec elapsed
"
"1","0.242 sec elapsed
"
"1","0.496 sec elapsed
"
"1","2.061 sec elapsed
"
"1","0.727 sec elapsed
"
"1","0.994 sec elapsed
"
"1","[1]"
"1"," ""fastcover time: """
"1","
"
"1","0.335 sec elapsed
"
"1","0.343 sec elapsed
"
"1","0.334 sec elapsed
"
"1","0.336 sec elapsed
"
"1","0.335 sec elapsed
"
"1","0.586 sec elapsed
"
"1","0.335 sec elapsed
"
"1","0.592 sec elapsed
"
"1","0.338 sec elapsed
"
"1","0.345 sec elapsed
"
"1","[1]"
"1"," ""wilson time: """
"1","
"
"1","5.153 sec elapsed
"
"1","5.137 sec elapsed
"
"1","2.059 sec elapsed
"
"1","1.709 sec elapsed
"
"1","4.843 sec elapsed
"
"1","0.824 sec elapsed
"
"1","4.377 sec elapsed
"
"1","6.157 sec elapsed
"
"1","0.092 sec elapsed
"
"1","2.599 sec elapsed
"
"1","[1]"
"1"," ""spectral gap is"""
"1","
"
"1","[1]"
"1"," 4.88272e-06"
"1","
"
"1","[1]"
"1"," ""aldous broder time: """
"1","
"
"1","0.654 sec elapsed
"
"1","6.918 sec elapsed
"
"1","4.236 sec elapsed
"
"1","4.713 sec elapsed
"
"1","5.396 sec elapsed
"
"1","5.413 sec elapsed
"
"1","2.629 sec elapsed
"
"1","4.071 sec elapsed
"
"1","0.761 sec elapsed
"
"1","14.603 sec elapsed
"
"1","[1]"
"1"," ""fastcover time: """
"1","
"
"1","0.159 sec elapsed
"
"1","0.162 sec elapsed
"
"1","0.163 sec elapsed
"
"1","0.169 sec elapsed
"
"1","0.169 sec elapsed
"
"1","0.271 sec elapsed
"
"1","0.162 sec elapsed
"
"1","0.169 sec elapsed
"
"1","0.162 sec elapsed
"
"1","0.165 sec elapsed
"
"1","[1]"
"1"," ""wilson time: """
"1","
"
"1","1.872 sec elapsed
"
"1","6.744 sec elapsed
"
"1","7.401 sec elapsed
"
"1","2.763 sec elapsed
"
"1","4.607 sec elapsed
"
"1","8.211 sec elapsed
"
"1","3.508 sec elapsed
"
"1","1.883 sec elapsed
"
"1","4.194 sec elapsed
"
"1","4.976 sec elapsed
"
"1","[1]"
"1"," ""spectral gap is"""
"1","
"
"1","[1]"
"1"," 3.617926e-06"
"1","
"
"1","[1]"
"1"," ""aldous broder time: """
"1","
"
"1","18.165 sec elapsed
"
"1","7.395 sec elapsed
"
"1","8.374 sec elapsed
"
"1","11.906 sec elapsed
"
"1","13.013 sec elapsed
"
"1","13.526 sec elapsed
"
"1","7.462 sec elapsed
"
"1","12.335 sec elapsed
"
"1","12.456 sec elapsed
"
"1","9.552 sec elapsed
"
"1","[1]"
"1"," ""fastcover time: """
"1","
"
"1","0.424 sec elapsed
"
"1","0.424 sec elapsed
"
"1","0.42 sec elapsed
"
"1","0.422 sec elapsed
"
"1","0.429 sec elapsed
"
"1","0.424 sec elapsed
"
"1","0.425 sec elapsed
"
"1","0.424 sec elapsed
"
"1","0.424 sec elapsed
"
"1","0.423 sec elapsed
"
"1","[1]"
"1"," ""wilson time: """
"1","
"
"1","7.424 sec elapsed
"
"1","11.306 sec elapsed
"
"1","6.897 sec elapsed
"
"1","9.199 sec elapsed
"
"1","3.039 sec elapsed
"
"1","8.983 sec elapsed
"
"1","13.418 sec elapsed
"
"1","10.116 sec elapsed
"
"1","14.265 sec elapsed
"
"1","4.402 sec elapsed
"
"1","[1]"
"1"," ""spectral gap is"""
"1","
"
"1","[1]"
"1"," 3.385978e-06"
"1","
"
"1","[1]"
"1"," ""aldous broder time: """
"1","
"
"1","15.529 sec elapsed
"
"1","24.771 sec elapsed
"
"1","15.145 sec elapsed
"
"1","14.203 sec elapsed
"
"1","13.269 sec elapsed
"
"1","10.424 sec elapsed
"
"1","13.669 sec elapsed
"
"1","22.542 sec elapsed
"
"1","17.819 sec elapsed
"
"1","13.632 sec elapsed
"
"1","[1]"
"1"," ""fastcover time: """
"1","
"
"1","0.559 sec elapsed
"
"1","0.55 sec elapsed
"
"1","0.562 sec elapsed
"
"1","0.557 sec elapsed
"
"1","0.553 sec elapsed
"
"1","0.562 sec elapsed
"
"1","0.556 sec elapsed
"
"1","0.558 sec elapsed
"
"1","0.561 sec elapsed
"
"1","0.555 sec elapsed
"
"1","[1]"
"1"," ""wilson time: """
"1","
"
"1","16.324 sec elapsed
"
"1","6.158 sec elapsed
"
"1","7.067 sec elapsed
"
"1","22.184 sec elapsed
"
"1","30.829 sec elapsed
"
"1","33.838 sec elapsed
"
"1","4.828 sec elapsed
"
"1","8.371 sec elapsed
"
"1","7.073 sec elapsed
"
"1","5.119 sec elapsed
"
"1","[1]"
"1"," ""spectral gap is"""
"1","
"
"1","[1]"
"1"," 3.651911e-06"
"1","
"
