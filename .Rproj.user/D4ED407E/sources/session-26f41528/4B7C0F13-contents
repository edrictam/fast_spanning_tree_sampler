source("helpers/helper.R")
source("helpers/helper_process_samples.R")

## *only used for processing gibbs sampler output* 
## given an undirected tree and the root, orient all edges to point away from root
## give the vertex *Name* of root as input
bfs_orient_graph = function(g, root = "1"){
  gg = make_empty_graph(n = length(V(g)), directed = TRUE)
  V(gg)$name <- 1:length(V(g))
  need_to_visit = c(root)
  visited = c()
  while (length(need_to_visit) > 0){
    parent = need_to_visit[1]
    need_to_visit = need_to_visit[-1]
    neighborhood = neighbors(g, as.character(parent), mode = "all")
    for (neighbor in neighborhood$name){
      if (!(neighbor %in% visited)){
        gg <- add_edges(gg, c(as.character(parent), as.character(neighbor)))
        need_to_visit = c(need_to_visit, as.character(neighbor))
      }
    }
    visited = c(visited, parent)
  }
  gg
}

## *only used for processing gibbs sampler output* 
## given an adjacency matrix, construct an undirected graph with appropriate names
reconstruct_graph_from_adjacency <- function(spanning){
  K_tilde = dim(spanning)[1]
  colnames(spanning) = 1:K_tilde
  g = graph_from_adjacency_matrix(spanning, mode = "undirected")
  bfs_orient_graph(g)
}

## ** not really used anymore, but saved here for reference** 
find_root = function(g){
  allNodes<- V(g)$name
  for (node in allNodes){
    if(length(neighbors(g,as.character(node), mode = "in"))==0){
      return(as.character(node))
    }
  }
  return("0")
}

## v is *name* of vertex
contract_empty_non_leaf_nodes <-function(g, v){
  parent = neighbors(g, as.character(v), mode = "in")
  children = neighbors(g, as.character(v), mode = "out")
  gg <- delete_edges(g, paste(parent$name, v, sep = "|"))
  for (child in children$name){
    gg <- delete_edges(gg, paste(v, child, sep = "|"))
  }
  for (child in children$name){
    gg <- add_edges(gg, c(as.character(parent$name), as.character(child)))
  }
  gg <- delete_vertices(gg, as.character(v))
  gg
} 

prune_tree <- function(g, z, K, root = "1"){
  K_tilde = K + 1
  empty_nodes = get_empty_nodes(z, K)
  leaves = get_leaves(g)
  nonleaves = setdiff(1:K_tilde, leaves)
  empty_leaf_nodes = intersect(leaves, empty_nodes)
  empty_non_leaf_nodes = intersect(empty_nodes, nonleaves)
  empty_non_leaf_non_root_nodes = setdiff(empty_non_leaf_nodes, as.integer(root))
  for (v in empty_non_leaf_non_root_nodes){
    g <- contract_empty_non_leaf_nodes(g, as.character(v))
  }
  for (v in empty_leaf_nodes){
    g <- delete_vertices(g, as.character(v))
  }
  g
}

evaluate_density = function(mu, Sigma, y, pi, z, lambda_sq, edge_list, K, nu, Sigma_0, a1, b1, conc){
  n = dim(y)[1]
  p = dim(y)[2]
  K_tilde = K + 1
  
  logL = 0
  eps = 1e-30
  for (i in 1:n){
    logL = logL + log(dmvnorm(y[i,], mu[z[i], ], Sigma))
    logL = logL + log(pi[z[i]] + eps) 
  }
  logL = logL + log(dinvwishart(Sigma, nu, Sigma_0))
  logL = logL + log(dinvgamma(lambda_sq, a1, b1))
  logL = logL +  ddirichlet(pi[2:K_tilde], rep(conc, K), log = TRUE)
  
  ## edgelist is E x 2 matrix, with left being source and right being sink node
  num_edge = dim(edge_list)[1]
  for (q in 1:num_edge){
    logL = logL + log(dmvnorm(mu[edge_list[q,2],], mu[edge_list[q,1],], lambda_sq * diag(p)))
  }
  
  logL
}

## Given two rooted directed trees, compute the mean path length of each tree
## (the average length of the paths from the root to the vertices)
## Return the difference in mean path length as a pseudometric between the two
## rooted trees
mean.path.length.diff <- function(g1, g2, r1 = "1", r2 = "1"){
  
  dists1 = shortest_paths(g1, r1)
  dists2 = shortest_paths(g2, r2)
  
  sum1 = 0
  sum2 = 0
  
  n1 = length(V(g1))
  n2 = length(V(g2))
  
  for (i in 1:n1){
    sum1 = sum1 + length(dists1[[1]][[i]])
  }
  for (i in 1:n2){
    sum2 = sum2 + length(dists2[[1]][[i]])
  }
  return(abs(sum1/n1 - sum2/n2))
}

## given the posterior densities of the samples and number of desired samples 
## in HPD, return the sorted (descending order) indices of the densities  
get_sorted_indices <- function(density, num_samples_in_hpd){
  results= sort(density, decreasing = TRUE, index.return = TRUE)
  sorted_indices = results$ix[1:num_samples_in_hpd]
}

## given the list of graph objects, as well as the indices that are in the HPD
## Region, as well as the number of samples in the HPD, return a distance matrix
## that is calculated based on the mean path length difference pseudometric



get_mean_path_lengths <- function(graphlist, r = "1"){
  path_lengths = rep(0, length(graphlist))
  for (i in 1:length(graphlist)){
      g = graphlist[[i]]
      dists = shortest_paths(g, r)
      sums = 0
      n = length(V(g))
      for (j in 1:n){
        sums = sums + length(dists[[1]][[j]])
      }
      path_lengths[i] = sums
  }
  path_lengths
}
 
# get_distance_mat <- function(graphlist, sorted_indices, num_samples_in_hpd){
#   distance_mat = matrix(rep(0, num_samples_in_hpd*num_samples_in_hpd), num_samples_in_hpd, num_samples_in_hpd)
#   for (i in 1:num_samples_in_hpd){
#     if ((i %% 10) == 0){
#       print(paste("At iteration", i))
#     }
#     for (j in 1:num_samples_in_hpd){
#       ind1 = sorted_indices[i]
#       ind2 = sorted_indices[j]
#       if (ind1 > ind2){
#         distance_mat[i,j] = mean.path.length.diff(graphlist[[ind1]], graphlist[[ind2]])
#         distance_mat[j, i] = distance_mat[i,j]
#       }
#     }
#   }
#   distance_mat
# }

get_frechet_mean_index_new = function(distance_mat){
  frechet = Inf
  frechet_ind = -1
  n = dim(distance_mat)[1]
  sum_of_squares = rep(0, n)
  for (i in 1:n){
    for (j in 1:n){
      sum_of_squares[i] = sum_of_squares[i] + distance_mat[i, j]^2
    }
    if (sum_of_squares[i] < frechet){
      frechet = sum_of_squares[i]
      frechet_ind = i
    }
  }
  # frechet_ind
  which(frechet == sum_of_squares)
}

# get_frechet_mean_index = function(distance_mat, sorted_indices, num_samples_in_hpd){
#   frechet = Inf
#   frechet_ind = -1
#   for (i in 1:num_samples_in_hpd){
#     sum_of_squares = 0
#     for (j in 1:num_samples_in_hpd){
#       sum_of_squares = sum_of_squares + distance_mat[i, j]^2
#     }
#     if (sum_of_squares < frechet){
#       frechet = sum_of_squares
#       frechet_ind = i
#     }
#   }
#   sorted_indices[frechet_ind]
# }

find_diverse_tree_indices <- function(graphlist, sorted_indices, num_samples_in_hpd){
  max_node = -1
  max_node_ind = -1
  max_leaves = -1
  max_leaves_ind = -1
  min_node = Inf
  min_node_ind = Inf
  min_leaves = Inf
  min_leaves_ind = Inf
  
  for (i in 1:num_samples_in_hpd){
    index = sorted_indices[i]
    g = graphlist[[index]]
    upper_bound = length(V(g))
    nnodes = num_nodes(g, upper_bound)
    nleaves = num_leaves(g)
    if (nnodes > max_node){
      max_node_ind = index
      max_node = nnodes
    }
    if (nleaves > max_leaves){
      max_leaves_ind = index
      max_leaves = nleaves
    }
    if (nnodes < min_node){
      min_node_ind = index
      min_node = nnodes
    }
    if (nleaves < min_leaves){
      min_leaves_ind = index
      min_leaves = nleaves
    }
  }
  return(c(max_node_ind, max_leaves_ind, min_node_ind, min_leaves_ind))
}

## given a graph g, plot it with tree layout
plot_as_tree <- function(g, root = "1"){
  plot(as.undirected(g), layout = layout_as_tree(g, root = root), vertex.label=NA)
}


