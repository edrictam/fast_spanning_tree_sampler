---
title: "Process Gibbs Samples"
format: pdf
---

```{r}
source("helpers/helper_process_samples.R")
source("helpers/helper_gibbs_tree_pruning_processing.R")
library(coda)
library(igraph)
```

```{r}
load("saved_trajectories/gibbs_output.RData")

niter = 5000
burnin = 3500
used_samples = (burnin + 1):niter

transformed_params = matrix(rep(0, 4*niter),niter, 4)

for (i in (burnin+1):niter){
  if((i %% 10) == 0){
    print(paste("At iteration ", i))
  }
  spanning = res.gibbs$spanning[i,,]
  
  K_tilde = dim(spanning)[1]
  K = K_tilde - 1
  
  z = res.gibbs$z[i,]
  g = reconstruct_graph_from_adjacency(spanning)
  g = prune_tree(g, z, K)
  
  transformed_params[i, 1] = max_degree(g)
  transformed_params[i, 2] = max_depth(g)
  transformed_params[i, 3] = num_nodes(g, K_tilde)
  transformed_params[i, 4] = num_leaves(g)
}


transformed_params = transformed_params[(burnin + 1):niter,]

```

```{r}

## Setup tree related chains
chain.deg = mcmc(transformed_params[,1])
varnames(chain.deg) <- "maximum degree"

chain.depth = mcmc(transformed_params[,2])
varnames(chain.depth) <- "maximum depth"

chain.nodes = mcmc(transformed_params[,3])
varnames(chain.nodes) <- "number of nodes"

chain.leaves = mcmc(transformed_params[,4])
varnames(chain.leaves) <- "number of leaves"


## save trace, density and acf plots for tree related parameters
image_save_prefix = "images/gibbs/"

pdf(paste(image_save_prefix, "gibbs_deg_trace.pdf", sep = ""))
make.trace(chain.deg, "maximum degree")
dev.off()

pdf(paste(image_save_prefix, "gibbs_deg_dens.pdf", sep = ""))
make.bars(chain.deg, "maximum degree", axis_scale = 1.5)
dev.off()

pdf(paste(image_save_prefix, "gibbs_deg_acf.pdf", sep = ""))
make.acf(chain.deg, "maximum degree")
dev.off()

pdf(paste(image_save_prefix, "gibbs_depth_trace.pdf", sep = ""))
make.trace(chain.depth, "depth")
dev.off()

pdf(paste(image_save_prefix, "gibbs_depth_dens.pdf", sep = ""))
make.bars(chain.depth, "depth", axis_scale = 1.2)
dev.off()

pdf(paste(image_save_prefix, "gibbs_depth_acf.pdf", sep = ""))
make.acf(chain.depth, "depth")
dev.off()

pdf(paste(image_save_prefix, "gibbs_nodes_trace.pdf", sep = ""))
make.trace(chain.nodes, "number of nodes")
dev.off()

pdf(paste(image_save_prefix, "gibbs_nodes_dens.pdf", sep = ""))
make.bars(chain.nodes, "number of nodes", axis_scale = 1.5)
dev.off()

pdf(paste(image_save_prefix, "gibbs_nodes_acf.pdf", sep = ""))
make.acf(chain.nodes, "number of nodes")
dev.off()

pdf(paste(image_save_prefix, "gibbs_leaves_trace.pdf", sep = ""))
make.trace(chain.leaves, "number of leaves")
dev.off()

pdf(paste(image_save_prefix, "gibbs_leaves_dens.pdf", sep = ""))
make.bars(chain.leaves, "number of leaves", axis_scale = 1.5)
dev.off()

pdf(paste(image_save_prefix, "gibbs_leaves_acf.pdf", sep = ""))
make.acf(chain.leaves, "number of leaves")
dev.off()


## make sure all x axis ticks show up for this plot
pdf(paste(image_save_prefix, "gibbs_leaves_dens.pdf", sep = ""))
make.bars(chain.leaves, "number of leaves", axis_scale = 1.29 )
dev.off()

## Setup chains for all other parameters


chain.z = mcmc(res.gibbs$z[used_samples,])

chain.pi = mcmc(res.gibbs$pi[used_samples,])

## Setup up a chain for mu for each of p = 4 dimensions
chain.mu1 = mcmc(res.gibbs$mu[used_samples,,1])

chain.mu2 = mcmc(res.gibbs$mu[used_samples,,2])


## Setup a chain for the diagonal values of Sigma (p = 4)
chain.Sigma1 = mcmc(res.gibbs$Sigma[used_samples,1,1])

chain.Sigma2 = mcmc(res.gibbs$Sigma[used_samples,2,2])

```

```{r}
make.trace(mcmc(res.gibbs$Sigma[used_samples,1,1]), "maximum degree")


## ESS for Tree Parameters
ESSPerIter(chain.deg, niter, burnin)
ESSPerIter(chain.depth, niter, burnin)
ESSPerIter(chain.nodes, niter, burnin)
ESSPerIter(chain.leaves, niter, burnin)

```
 

